package main

import (
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"math/big"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"

	eabi "github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/urfave/cli/v2"
	"golang.org/x/xerrors"

	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-state-types/abi"
	fbig "github.com/filecoin-project/go-state-types/big"
	"github.com/filecoin-project/go-state-types/builtin"

	"github.com/filecoin-project/curio/build"

	"github.com/filecoin-project/lotus/api"
	"github.com/filecoin-project/lotus/build/buildconstants"
	"github.com/filecoin-project/lotus/chain/actors"
	"github.com/filecoin-project/lotus/chain/types"
	"github.com/filecoin-project/lotus/chain/types/ethtypes"
	cliutil "github.com/filecoin-project/lotus/cli/util"
)

// Contract ABI (replace with your actual contract ABI)
// ABI of the deployed contract as a JSON string
const contractABI = `
{
  "_format": "hh-sol-artifact-1",
  "contractName": "CurioMembership",
  "sourceName": "contracts/CurioMembership.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inFundsReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inSignerPublicKey",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldReceiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "FundsReceiverChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "uuid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        }
      ],
      "name": "PaymentMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminGLOBAL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "uuid",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        }
      ],
      "name": "adminUpdateMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newReceiver",
          "type": "address"
        }
      ],
      "name": "changeFundsReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateGLOBAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsReceiverGLOBAL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "uuid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateAndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paymentRecords",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "daysSince2024",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "level",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rateAndTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerPublicKeyGLOBAL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatedTimeGLOBAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063a75ff7bc1161007f578063e2e86ad811610059578063e2e86ad81461024f578063f43d679b1461026f578063f851a4401461028f578063fa540801146102ad57600080fd5b8063a75ff7bc146101f9578063b028060014610219578063b3b76bd11461023957600080fd5b80635691fe63116100bb5780635691fe631461014557806365b6e3c8146101a35780638e5b620b146101c3578063a6f170a6146101d957600080fd5b806323c7e09c146100e25780633ba0b9a9146101125780633c3f73b814610130575b600080fd5b3480156100ee57600080fd5b506001546001600160a01b03165b604051610109919061093f565b60405180910390f35b34801561011e57600080fd5b506002545b6040516101099190610953565b61014361013e366004610a7f565b6102cd565b005b34801561015157600080fd5b50610194610160366004610aea565b60056020526000908152604090205461ffff808216916201000081049091169064010000000090046001600160a01b031683565b60405161010993929190610b15565b3480156101af57600080fd5b506004546100fc906001600160a01b031681565b3480156101cf57600080fd5b5061012360025481565b3480156101e557600080fd5b506101436101f4366004610b65565b6103c9565b34801561020557600080fd5b506000546100fc906001600160a01b031681565b34801561022557600080fd5b50610143610234366004610bab565b610440565b34801561024557600080fd5b5061012360035481565b34801561025b57600080fd5b5061014361026a366004610bcc565b610504565b34801561027b57600080fd5b506001546100fc906001600160a01b031681565b34801561029b57600080fd5b506000546001600160a01b03166100fc565b3480156102b957600080fd5b506101236102c8366004610aea565b6105f6565b6102d78282610504565b60006002546101f46102e99190610c3a565b905060006002546107d06102fd9190610c3a565b9050600081340361031057506002610340565b82340361031f57506001610340565b60405162461bcd60e51b815260040161033790610c90565b60405180910390fd5b61034b868233610626565b6001546040516001600160a01b03909116903480156108fc02916000818181858888f19350505050158015610384573d6000803e3d6000fd5b50857fcbf5e80ebc4abf0f3218f68ace24ba05972bb3485480f35561a8fe4d32f65d0b3334846040516103b993929190610ca9565b60405180910390a2505050505050565b6000546001600160a01b031633146103f35760405162461bcd60e51b815260040161033790610d2e565b6103fe838383610626565b827fcbf5e80ebc4abf0f3218f68ace24ba05972bb3485480f35561a8fe4d32f65d0b3360008560405161043393929190610d56565b60405180910390a2505050565b6000546001600160a01b0316331461046a5760405162461bcd60e51b815260040161033790610d2e565b6001600160a01b0381166104905760405162461bcd60e51b815260040161033790610dcb565b6001546040516001600160a01b038084169216907fa02270409724ab2ef0cbf8f5c198a4f2693e2be21e66c222570aef73316b664390600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b67ffffffffffffffff821661051b81610834610ddb565b42111561053a5760405162461bcd60e51b815260040161033790610e22565b600061056b846040516020016105509190610e32565b604051602081830303815290604052805190602001206105f6565b6004549091506001600160a01b031661058482856106de565b6001600160a01b0316146105aa5760405162461bcd60e51b815260040161033790610e7b565b604084811c6002819055600384905590517fc8d1043f24843c0a1c9251fdc30017d84e87498fbcf232af9f86816b5e182bde916105e8918590610e8b565b60405180910390a150505050565b6000816040516020016106099190610ead565b604051602081830303815290604052805190602001209050919050565b6040518060600160405280620151806365920080426106459190610edf565b61064f9190610f08565b61ffff908116825260ff9094166020808301919091526001600160a01b039384166040928301526000958652600581529481902082518154968401519390920151909316640100000000027fffffffffffffffff0000000000000000000000000000000000000000ffffffff928516620100000263ffffffff1990961691909416179390931792909216179055565b6000806000806106ee868661070a565b9250925092506106fe8282610757565b50909150505b92915050565b600080600083516041036107445760208401516040850151606086015160001a6107368882858561085d565b955095509550505050610750565b50508151600091506002905b9250925092565b600082600381111561076b5761076b610f1c565b03610774575050565b600182600381111561078857610788610f1c565b036107bf576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028260038111156107d3576107d3610f1c565b0361080c576040517ffce698f7000000000000000000000000000000000000000000000000000000008152610337908290600401610953565b600382600381111561082057610820610f1c565b0361085957806040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004016103379190610953565b5050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156108985750600091506003905082610915565b6000600188888888604051600081526020016040526040516108bd9493929190610f32565b6020604051602081039080840390855afa1580156108df573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661090b57506000925060019150829050610915565b9250600091508190505b9450945094915050565b60006001600160a01b038216610704565b6109398161091f565b82525050565b602081016107048284610930565b80610939565b60208101610704828461094d565b805b811461096e57600080fd5b50565b803561070481610961565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156109b8576109b861097c565b6040525050565b60006109ca60405190565b90506109d68282610992565b919050565b600067ffffffffffffffff8211156109f5576109f561097c565b601f19601f83011660200192915050565b82818337506000910152565b6000610a25610a20846109db565b6109bf565b905082815260208101848484011115610a4057610a40600080fd5b610a4b848285610a06565b509392505050565b600082601f830112610a6757610a67600080fd5b8135610a77848260208601610a12565b949350505050565b600080600060608486031215610a9757610a97600080fd5b6000610aa38686610971565b9350506020610ab486828701610971565b925050604084013567ffffffffffffffff811115610ad457610ad4600080fd5b610ae086828701610a53565b9150509250925092565b600060208284031215610aff57610aff600080fd5b6000610a778484610971565b61ffff8116610939565b60608101610b238286610b0b565b610b306020830185610b0b565b610a776040830184610930565b60ff8116610963565b803561070481610b3d565b6109638161091f565b803561070481610b51565b600080600060608486031215610b7d57610b7d600080fd5b6000610b898686610971565b9350506020610b9a86828701610b46565b9250506040610ae086828701610b5a565b600060208284031215610bc057610bc0600080fd5b6000610a778484610b5a565b60008060408385031215610be257610be2600080fd5b6000610bee8585610971565b925050602083013567ffffffffffffffff811115610c0e57610c0e600080fd5b610c1a85828601610a53565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b818102808215838204851417610c5257610c52610c24565b5092915050565b601881526000602082017f496e636f7272656374207061796d656e7420616d6f756e740000000000000000815291505b5060200190565b6020808252810161070481610c59565b60ff8116610939565b60608101610cb78286610930565b610cc4602083018561094d565b610a776040830184610ca0565b602281526000602082017f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746981527f6f6e000000000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b6020808252810161070481610cd1565b6000610704610d4a8381565b90565b61093981610d3e565b60608101610d648286610930565b610cc46020830185610d4d565b602781526000602082017f4e65772072656365697665722063616e6e6f7420626520746865207a65726f2081527f616464726573730000000000000000000000000000000000000000000000000060208201529150610d27565b6020808252810161070481610d71565b8082018082111561070457610704610c24565b601f81526000602082017f45786368616e676520726174652075706461746520697320746f6f206f6c640081529150610c89565b6020808252810161070481610dee565b6000610e3e828461094d565b50602001919050565b601181526000602082017f496e76616c6964207369676e617475726500000000000000000000000000000081529150610c89565b6020808252810161070481610e47565b60408101610e99828561094d565b610ea6602083018461094d565b9392505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c016000610e3e828461094d565b8181038181111561070457610704610c24565b634e487b7160e01b600052601260045260246000fd5b600082610f1757610f17610ef2565b500490565b634e487b7160e01b600052602160045260246000fd5b60808101610f40828761094d565b610f4d6020830186610ca0565b610f5a604083018561094d565b610f67606083018461094d565b9594505050505056fea2646970667358221220722507a3142ddc3d17815b08fd7d7eeca30f0837e6a3b596d9a2c70f8fce5d2364736f6c63430008170033",
  "linkReferences": {},
  "deployedLinkReferences": {}
}
`

var premiumCmd = &cli.Command{
	Name:  "premium",
	Usage: "Manage Filecoin Premium Memberships",
	Subcommands: []*cli.Command{
		{
			Name:      "pay",
			Usage:     "Pay for a premium membership",
			Action:    pay,
			ArgsUsage: "<PremiumID> <walletID> <Level [1|2]>",
			Flags: []cli.Flag{
				&cli.BoolFlag{
					Name:  "really-do-it",
					Usage: "Actually pay for the membership",
				},
			},
		},
	},
}

func pay(cctx *cli.Context) error {
	if cctx.Args().Len() != 3 {
		return cli.ShowCommandHelp(cctx, cctx.Command.Name)
	}

	premiumID := cctx.Args().Get(0)
	walletID := cctx.Args().Get(1)
	level := cctx.Args().Get(2)

	if level != "1" && level != "2" {
		return cli.ShowCommandHelp(cctx, cctx.Command.Name)
	}

	resp, err := http.DefaultClient.Get("https://market.curiostorage.org/api/exchangerate")
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	var exchangeRate struct {
		RateAndTimestamp string `json:"msg"` // "0x" + rate(24B) + timestamp(8B)
		Sig              string `json:"sig"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&exchangeRate); err != nil {
		return err
	}
	rateAtto := big.NewInt(0)
	rateAtto.SetString(exchangeRate.RateAndTimestamp[2:24*2+2], 16)

	costAtto := big.NewInt(map[string]int64{"1": 500, "2": 2000}[level])
	costAtto = costAtto.Mul(costAtto, rateAtto)
	costFil, err := types.ParseFIL(costAtto.String() + "attofil")
	if err != nil {
		return xerrors.Errorf("error parsing fil")
	}

	fmt.Println("The cost of level ", level, " membership is ", costFil.String(), " FIL")

	full, closer, err := cliutil.GetFullNodeAPIV1(cctx)
	if err != nil {
		return xerrors.Errorf("connecting to full node: %w", err)
	}
	defer closer()

	walletAddress, err := address.NewFromString(walletID)
	if err != nil {
		return xerrors.Errorf("parsing wallet address: %w", err)
	}
	walletAmnt, err := full.WalletBalance(cctx.Context, walletAddress)
	if err != nil {
		return xerrors.Errorf("getting wallet balance: %w", err)
	}
	if walletAmnt.LessThan(fbig.NewFromGo(costAtto)) {
		return xerrors.Errorf("wallet balance is less than the cost of the membership")
	}

	var contractID string
	if build.BuildType == build.BuildMainnet {
		contractID = "f01234" //TODO!!!!!!!!!
	} else if build.BuildType == build.BuildCalibnet {
		contractID = "0xE08bBc65aF1f1a40BD3cbaD290a23925F83b8BBB" //TODO: Update if contract is changed
	} else {
		// Give for free.
		return errors.New(build.BuildTypeString() + " network does not support buying premium memberships")
	}

	ctx := cctx.Context

	to, err := ethtypes.ParseEthAddress(contractID)
	if err != nil {
		return xerrors.Errorf("failed to parse contract address: %w", err)
	}

	toAddr, err := to.ToFilecoinAddress()
	if err != nil {
		return xerrors.Errorf("failed to convert Eth address to Filecoin address: %w", err)
	}

	// Parse the contract's ABI
	parsedABI, err := eabi.JSON(strings.NewReader(contractABI))
	if err != nil {
		log.Fatalf("Failed to parse contract ABI: %v", err)
	}

	//Encode the method call to the contract (using the pay method with UUID)
	data, err := parsedABI.Pack("pay", premiumID, exchangeRate.RateAndTimestamp, exchangeRate.Sig)
	if err != nil {
		log.Fatalf("Failed to pack the `pay()` function call: %v", err)
	}

	param := abi.CborBytes(data)
	params, err := actors.SerializeParams(&param)
	if err != nil {
		return fmt.Errorf("failed to serialize params: %w", err)
	}

	msg := &types.Message{
		From:       walletAddress,
		To:         toAddr,
		Value:      abi.TokenAmount(costFil),
		Method:     builtin.MethodsEVM.InvokeContract,
		Params:     params,
		GasLimit:   buildconstants.BlockGasLimit,
		GasFeeCap:  fbig.Zero(),
		GasPremium: fbig.Zero(),
	}

	maxFee, err := types.ParseFIL("5 FIL")
	if err != nil {
		return xerrors.Errorf("failed to parse max fee: %w", err)
	}

	mspec := &api.MessageSendSpec{
		MaxFee: abi.TokenAmount(maxFee),
	}

	msg, err = full.GasEstimateMessageGas(ctx, msg, mspec, types.EmptyTSK)
	if err != nil {
		return xerrors.Errorf("failed to estimate gas: %w", err)
	}

	if !cctx.Bool("really-do-it") {
		fmt.Println("Not sending the message... Use '--really-do-it flag to send the message'")
		return nil
	}

	sm, err := full.MpoolPushMessage(ctx, msg, mspec)
	if err != nil {
		return xerrors.Errorf("failed to push message to mempool: %w", err)
	}

	res, err := full.StateWaitMsg(ctx, sm.Cid(), 5, 2000, true)
	if err != nil {
		return xerrors.Errorf("failed to wait for message: %w", err)
	}

	if res.Receipt.ExitCode != 0 {
		return xerrors.Errorf("message execution failed (exit code %d)", res.Receipt.ExitCode)
	}

	fmt.Printf("Membership purchased successfully with %s!\n", res.Message.String())

	// Provide a web link to update your Slack list.
	// Fakers have: PremiumID, WalletID, Level, Cost, TxnID, Timestamp
	// To verify, blockchain + wallet-signed blob w/txnID & timestamp.
	//   Market used GLIF for txn read & verifies wallet signature.
	var qry url.Values
	qry.Add("network", build.BuildTypeString())
	qry.Add("premiumID", premiumID)
	qry.Add("timestamp", strconv.FormatInt(time.Now().Unix(), 10))
	qry.Add("MessageCID", res.Message.String())
	qry.Add("walletID", walletID)
	message := qry.Encode()
	sig, err := full.WalletSign(cctx.Context, walletAddress, []byte(message))
	if err != nil {
		return xerrors.Errorf("Purchase made. Could not build link: signing txn: %w", err)
	}
	txnSig, err := sig.MarshalBinary()
	if err != nil {
		return xerrors.Errorf("Purchase made. Could not build link: marshaling txn: %w", err)
	}
	qry.Add("txnSign", hex.EncodeToString(txnSig))
	fmt.Println(`Complete/Verify your registration at:
		https://market.curiostorage.org/pay/verify/?` + qry.Encode())
	return errors.New("not implemented")
}
