// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package common

import (
	"fmt"
	"io"
	"math"
	"sort"

	proof "github.com/filecoin-project/curio/lib/proof"
	abi "github.com/filecoin-project/go-state-types/abi"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *ProofRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{163}); err != nil {
		return err
	}

	// t.PoRep (proof.Commit1OutRaw) (struct)
	if len("PoRep") > 8192 {
		return xerrors.Errorf("Value in field \"PoRep\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("PoRep"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("PoRep")); err != nil {
		return err
	}

	if err := t.PoRep.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.SectorID (abi.SectorID) (struct)
	if len("SectorID") > 8192 {
		return xerrors.Errorf("Value in field \"SectorID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("SectorID"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("SectorID")); err != nil {
		return err
	}

	if err := t.SectorID.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.MaxPriceNfil (big.Int) (struct)
	if len("MaxPriceNfil") > 8192 {
		return xerrors.Errorf("Value in field \"MaxPriceNfil\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("MaxPriceNfil"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("MaxPriceNfil")); err != nil {
		return err
	}

	if err := t.MaxPriceNfil.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *ProofRequest) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ProofRequest{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ProofRequest: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 12)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.PoRep (proof.Commit1OutRaw) (struct)
		case "PoRep":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.PoRep = new(proof.Commit1OutRaw)
					if err := t.PoRep.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.PoRep pointer: %w", err)
					}
				}

			}
			// t.SectorID (abi.SectorID) (struct)
		case "SectorID":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.SectorID = new(abi.SectorID)
					if err := t.SectorID.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.SectorID pointer: %w", err)
					}
				}

			}
			// t.MaxPriceNfil (big.Int) (struct)
		case "MaxPriceNfil":

			{

				if err := t.MaxPriceNfil.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.MaxPriceNfil: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
